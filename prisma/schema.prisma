// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  name            String
  bio             String
  email           String
  wallet_address  String
  avatar_img      String
  banner_img      String
  additional_info Json?

  products   Product[]
  attributes UserAttribute[]

  @@index(name)
  @@index(wallet_address)
  @@map("users")
}

model UserAttribute {
  id      Int    @id @default(autoincrement())
  name    String
  value   String
  user_id Int

  user User @relation(fields: [user_id], references: [id])

  @@unique([name, value, user_id])
  @@index([name, value])
  @@index(user_id)
  @@map("user_attributes")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  category    String
  description String
  avatar_img  String
  banner_img  String
  metadata    Json?
  owner_id    Int
  featured_at DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt

  stat_total_collection Int?
  stat_total_items      Int?
  stat_total_activities BigInt?

  stat_total_volume_all BigInt?
  stat_total_volume_12m BigInt?
  stat_total_volume_30d BigInt?
  stat_total_volume_7d  BigInt?

  stat_floor_price_all BigInt?
  stat_floor_price_12m BigInt?
  stat_floor_price_30d BigInt?
  stat_floor_price_7d  BigInt?

  owner               User                @relation(fields: [owner_id], references: [id])
  attributes          ProductAttribute[]
  product_collections ProductCollection[]

  @@unique(name)
  @@index(category)
  @@index(owner_id)
  @@index(created_at)
  @@map("products")
}

model ProductAttribute {
  id         Int    @id @default(autoincrement())
  name       String
  value      String
  product_id Int

  product Product @relation(fields: [product_id], references: [id])

  @@unique([name, value, product_id])
  @@index([name, value])
  @@index(product_id)
  @@map("product_attributes")
}

model Collection {
  id               Int     @id @default(autoincrement())
  name             String?
  chain_id         String
  contract_address String
  metadata         Json?

  nfts                Nft[]
  product_collections ProductCollection[]
  created_at          DateTime            @default(now())
  updated_at          DateTime            @default(now()) @updatedAt

  @@unique([chain_id, contract_address])
  @@index(name)
  @@map("collections")
}

model ProductCollection {
  id            Int @id @default(autoincrement())
  product_id    Int
  collection_id Int

  product    Product    @relation(fields: [product_id], references: [id])
  collection Collection @relation(fields: [collection_id], references: [id])

  @@unique([product_id, collection_id])
  @@index([product_id])
  @@index([collection_id])
  @@map("product_collections")
}

model Nft {
  id               Int    @id @default(autoincrement())
  chain_id         String
  collection_id    Int
  contract_address String
  token_id         String
  metadata         Json?

  collection Collection @relation(fields: [collection_id], references: [id])
  ipassets   Ipasset[]

  @@unique([collection_id, token_id])
  @@unique([chain_id, contract_address, token_id])
  @@index(collection_id)
  @@map("nfts")
}

model Ipasset {
  id                Int    @id @default(autoincrement())
  chain_id          String
  contract_address  String
  parent_ipasset_id Int?
  nft_id            Int
  metadata          Json?

  nft             Nft       @relation(fields: [nft_id], references: [id])
  parent_ipassets Ipasset?  @relation("ParentChildIpasset", fields: [parent_ipasset_id], references: [id])
  child_ipassets  Ipasset[] @relation("ParentChildIpasset")
  licenses        License[]

  @@unique([chain_id, contract_address])
  @@index(parent_ipasset_id)
  @@map("ipassets")
}

model License {
  id               Int    @id @default(autoincrement())
  chain_id         String
  contract_address String
  token_id         String
  ipasset_id       Int
  metadata         Json?

  ipasset Ipasset @relation(fields: [ipasset_id], references: [id])

  @@unique([chain_id, contract_address, token_id])
  @@map("licenses")
}
